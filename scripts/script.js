const arr = [[[[2, 5, 9]], [[[[[[[5, 2, 1]]]]]]]], [], 4, [[8, 4]]];
const simpleArr = [1, 2, 3, 4, 5];

function getMyFlat(array) {
  if (arguments.length > 1) {
    throw new Error(
      `Function accepts only 1 argument, too much arguments provided`
    );
  }
  return array.reduce((flatAccum, checkingArr) => {
    return flatAccum.concat(
      Array.isArray(checkingArr) ? getMyFlat(checkingArr) : checkingArr
    );
  }, []);
}

console.log(getMyFlat(arr)); //[2, 5, 9, 5, 2, 1, 4, 8, 4]
console.log(getMyFlat(simpleArr)); //[1, 2, 3, 4, 5]
// console.log(getMyFlat(arr, ``)); //Uncaught Error: Function accepts only 1 argument...
// console.log(getMyFlat(arr, `0`)); //Uncaught Error: Function accepts only 1 argument...
// console.log(getMyFlat(arr, `   `)); //Uncaught Error: Function accepts only 1 argument...
// console.log(getMyFlat(arr, 6421)); //Uncaught Error: Function accepts only 1 argument...
// console.log(getMyFlat(arr, `jkin345`)); //Uncaught Error: Function accepts only 1 argument...
// console.log(getMyFlat(arr, null)); //Uncaught Error: Function accepts only 1 argument...
// console.log(getMyFlat(arr, undefined)); //Uncaught Error: Function accepts only 1 argument...
// console.log(getMyFlat(arr, NaN)); //Uncaught Error: Function accepts only 1 argument...
// console.log(getMyFlat(arr, false)); //Uncaught Error: Function accepts only 1 argument...
// console.log(getMyFlat(arr, 0)); //Uncaught Error: Function accepts only 1 argument...
